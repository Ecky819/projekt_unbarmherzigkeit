rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // User profiles - nur der eigene User kann auf sein Profil zugreifen
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Admin actions log - nur Admins können lesen
    match /admin_actions/{actionId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if false; // Nur durch Cloud Functions beschreibbar
    }
    
    // User management collection - für Admin-Interface
    match /user_management/{userId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null && isSuperAdmin();
    }
    
    // Victims - Lesen für alle authentifizierten User, Schreiben nur für Admins
    match /victims/{victimId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Concentration Camps - Lesen für alle authentifizierten User, Schreiben nur für Admins
    match /camps/{campId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Commanders - Lesen für alle authentifizierten User, Schreiben nur für Admins
    match /commanders/{commanderId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Metadata - Lesen für alle authentifizierten User, Schreiben nur für Admins
    match /_metadata/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Admin-Funktionen basierend auf Custom Claims
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.admin == true;
    }
    
    function isSuperAdmin() {
      return request.auth != null && 
             request.auth.token.admin == true && 
             request.auth.token.adminLevel == "super";
    }
    
    function isModeratorOrAbove() {
      return request.auth != null && 
             request.auth.token.admin == true && 
             (request.auth.token.adminLevel == "moderator" || 
              request.auth.token.adminLevel == "admin" || 
              request.auth.token.adminLevel == "super");
    }
    
    function hasRole(role) {
      return request.auth != null && 
             request.auth.token.role == role;
    }
    
    function hasAnyRole(roles) {
      return request.auth != null && 
             request.auth.token.role in roles;
    }
    
    // Legacy support - Fallback für Migration (temporär)
    function isLegacyAdmin() {
      return request.auth != null && 
             request.auth.token.email in [
               'marcoeggert73@gmail.com',
               'admin@projekt-unbarmherzigkeit.de'
             ];
    }
    
    // Kombinierte Admin-Check während Migration
    function isAdminWithFallback() {
      return isAdmin() || isLegacyAdmin();
    }
  }
}