rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========== HELPER FUNCTIONS ==========
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is admin using Custom Claims
    function isAdmin() {
      return isAuthenticated() && (
        request.auth.token.admin == true || 
        request.auth.token.role == 'admin' ||
        // Legacy fallback for gradual migration
        request.auth.token.email == 'marcoeggert73@gmail.com'
      );
    }
    
    // Check if user has specific role
    function hasRole(role) {
      return isAuthenticated() && (
        request.auth.token.role == role ||
        (request.auth.token.roles is list && role in request.auth.token.roles)
      );
    }
    
    // Check if user has specific permission
    function hasPermission(permission) {
      return isAuthenticated() && (
        request.auth.token.permissions is list && 
        permission in request.auth.token.permissions
      );
    }
    
    // Check if user is owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user can read (authenticated users)
    function canRead() {
      return isAuthenticated();
    }
    
    // Check if user can write (admin or specific permission)
    function canWrite() {
      return isAdmin();
    }
    
    // Check if user can perform specific action
    function canPerformAction(action) {
      return isAdmin() || hasPermission(action);
    }
    
    // ========== USER PROFILES ==========
    
    // User profiles - nur der eigene User kann auf sein Profil zugreifen
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAdmin();
    }
    
    // Admin user management - only admins can access
    match /admin/users/{userId} {
      allow read, write: if isAdmin();
    }
    
    // ========== VICTIMS ==========
    
    // Victims - Lesen für alle authentifizierten User, Schreiben je nach Berechtigung
    match /victims/{victimId} {
      allow read: if canRead();
      allow create: if canPerformAction('create_victim');
      allow update: if canPerformAction('update_victim');
      allow delete: if canPerformAction('delete_victim');
    }
    
    // ========== CONCENTRATION CAMPS ==========
    
    // Concentration Camps - Lesen für alle authentifizierten User, Schreiben je nach Berechtigung
    match /camps/{campId} {
      allow read: if canRead();
      allow create: if canPerformAction('create_camp');
      allow update: if canPerformAction('update_camp');
      allow delete: if canPerformAction('delete_camp');
    }
    
    // ========== COMMANDERS ==========
    
    // Commanders - Lesen für alle authentifizierten User, Schreiben je nach Berechtigung
    match /commanders/{commanderId} {
      allow read: if canRead();
      allow create: if canPerformAction('create_commander');
      allow update: if canPerformAction('update_commander');
      allow delete: if canPerformAction('delete_commander');
    }
    
    // ========== METADATA ==========
    
    // Metadata - Lesen für alle authentifizierten User, Schreiben nur für Admins
    match /_metadata/{document} {
      allow read: if canRead();
      allow write: if isAdmin();
    }
    
    // ========== AUDIT LOGS ==========
    
    // Audit logs - nur Admins können lesen, System kann schreiben
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only server-side functions can write audit logs
    }
    
    // ========== USER ACTIVITY ==========
    
    // User activity tracking
    match /user_activity/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId);
    }
    
    // ========== STATISTICS ==========
    
    // App statistics - admins can read/write, users can read
    match /statistics/{statId} {
      allow read: if canRead();
      allow write: if isAdmin();
    }
    
    // ========== CONTENT MANAGEMENT ==========
    
    // News articles
    match /news/{articleId} {
      allow read: if true; // Public content
      allow write: if isAdmin() || hasRole('editor');
    }
    
    // Site configuration
    match /config/{configId} {
      allow read: if canRead();
      allow write: if isAdmin();
    }
    
    // ========== FILE UPLOADS ==========
    
    // File upload metadata
    match /uploads/{uploadId} {
      allow read: if canRead();
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.uploadedBy) || isAdmin();
      allow delete: if isOwner(resource.data.uploadedBy) || isAdmin();
    }
    
    // ========== FAVORITES ==========
    
    // WICHTIG: Die aktuelle Collection-Struktur für Favoriten
    // Die App verwendet 'user_favorites' als Collection, nicht 'users/{userId}/favorites'
    match /user_favorites/{favoriteId} {
      // Jeder authentifizierte User kann seine eigenen Favoriten lesen und schreiben
      // favoriteId hat Format: {userId}_{itemType}_{itemId}
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Admins können alle Favoriten sehen und verwalten
      allow read, write: if isAdmin();
    }
    
    // Legacy-Struktur (falls noch verwendet)
    // User favorites (alte Struktur, kann entfernt werden wenn nicht verwendet)
    match /users/{userId}/favorites/{itemId} {
      allow read, write: if isOwner(userId);
    }
    
    // ========== SEARCH INDEXES ==========
    
    // Search indexes (read-only for users, write for admins)
    match /search_indexes/{indexId} {
      allow read: if canRead();
      allow write: if isAdmin();
    }
    
    // ========== TEMPORARY DATA ==========
    
    // Temporary user data (sessions, cache, etc.)
    match /temp/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }
    
    // ========== FEEDBACK & REPORTS ==========
    
    // User feedback
    match /feedback/{feedbackId} {
      allow read: if isAdmin() || isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Content reports
    match /reports/{reportId} {
      allow read: if isAdmin() || hasRole('moderator');
      allow create: if isAuthenticated();
      allow update: if isAdmin() || hasRole('moderator');
      allow delete: if isAdmin();
    }
    
    // ========== SYSTEM COLLECTIONS ==========
    
    // System maintenance
    match /system/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Migration data
    match /migrations/{migrationId} {
      allow read, write: if isAdmin();
    }
    
    // ========== DEFAULT DENY ==========
    
    // Fallback rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}